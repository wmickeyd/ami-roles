#!/bin/bash -ex

## Build AMI using Packer

# All .yml in running dir
AMI_PROFILES=($(ls *.yml))
# Timestamp for image
DATE=$(date +%Y-%m-%d-%H-%M)

MAC_ADDR=$(curl -s http://169.254.169.254/latest/meta-data/mac)
# VPC to launch instance in
VPC_ID=$(curl -s http://169.254.169.254/latest/meta-data/network/interfaces/macs/${MAC_ADDR}/vpc-id)
# Subnet ID to launch instance in (Required in VPC)
SUBNET_ID=$(curl -s http://169.254.169.254/latest/meta-data/network/interfaces/macs/${MAC_ADDR}/subnet-id)

REGION=$(curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone/ | sed '$s/.$//')

# Instance type http://www.ec2instances.info/
INSTANCE_TYPE=t2.small
# Packer file
PACKER_FILE=base.json
PACKER_FILE_BOTH=both.json

# Capture some vars if running outside of Jenkins

if [[ -z "$UBUNTUAMI" ]]; then
  echo "Ubuntu ami isn't set"
  exit
fi

if [[ -z "$AMAZONAMI" ]]; then
  echo "Amazon AMI isn't set" 
  exit
fi

if [[ -z "$BUILD_NUMBER" ]]; then
  read -p "Build Number for this ami: " BUILD_NUMBER
fi

if [[ -z "$AMI_PROFILE" ]]; then
  echo -n "AMI Profile to provision " 
  echo -n ${AMI_PROFILES[@]//\.yml/} ":"
  read AMI_PROFILE
fi

if [ ! -f ${AMI_PROFILE}.yml ]; then
  eval "echo \"$(< template_ami_profile.yml)\"" > ${AMI_PROFILE}.yml
fi


# Log file
LOG=$BUILD_NUMBER-$AMI_PROFILE.log

# Clean up
if [ -f AMI-$AMI_PROFILE ]; then
  rm -f AMI-$AMI_PROFILE
fi

single_AMI () {
# Run packer
    /usr/bin/packer build \
    -machine-readable \
    -var hvm_amiid=$AMI_ID \
    -var build=$BUILD_NUMBER \
    -var ami_profile=$AMI_PROFILE \
    -var date=$DATE \
    -var vpc_id=$VPC_ID \
    -var subnet_id=$SUBNET_ID \
    -var region=$REGION \
    -var instance_type=$INSTANCE_TYPE \
    -var shellUser=$SSH_USERNAME \
    $PACKER_FILE \
    | tee $LOG
}

double_AMI () {
# Run Ubuntu packer
    /usr/bin/packer build \
    -machine-readable \
    -var hvm_amiid=$UBUNTUAMI \
    -var aws_amiid=$AMAZONAMI \
    -var build=$BUILD_NUMBER \
    -var ami_profile=$AMI_PROFILE \
    -var date=$DATE \
    -var vpc_id=$VPC_ID \
    -var subnet_id=$SUBNET_ID \
    -var region=$REGION \
    -var instance_type=$INSTANCE_TYPE \
    -var shellUser=$UBUNTU_SSH \
    -var awsShellUser=$AMAZON_SSH \
    $PACKER_FILE_BOTH \
    | tee $LOG

}

if [[ "$OS" == "Ubuntu" ]]; then
  SSH_USERNAME=ubuntu
  AMI_ID=$UBUNTUAMI
  single_AMI
elif [[ "$OS" == "Amazon" ]]; then 
  SSH_USERNAME=ec2-user
  AMI_ID=$AMAZONAMI
  single_AMI
else 
  UBUNTU_SSH=ubuntu
  AMAZON_SSH=ec2-user
  double_AMI
fi

# Output facts to the artifact
grep 'AMIs were created' $LOG | grep -v arti | grep -v grep | cut -d':' -f4 > AMI-$AMI_PROFILE
echo "" >> AMI-$AMI_PROFILE
grep 'Creating the AMI' $LOG|cut -d':' -f3 >> AMI-$AMI_PROFILE
echo "" >> AMI-$AMI_PROFILE
grep ',id,' $LOG |cut -d',' -f6 >> AMI-$AMI_PROFILE
